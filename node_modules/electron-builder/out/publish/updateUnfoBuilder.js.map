{"version":3,"file":"updateUnfoBuilder.js","sourceRoot":"","sources":["../../src/publish/updateUnfoBuilder.ts"],"names":[],"mappings":";;;;;;;;;;;;;;oEAYA,AAAK,WAAyB,AAA+B;AAC3D,cAAM,AAAW,4BAAoB,IAAC,AAAQ,SAAC,AAA4B,6BAAC,AAAW,eAAI,AAAQ,SAAC,AAAM,OAAC,AAAW,AAAC,AAAC;AACxH,AAAE,AAAC,YAAC,AAAW,YAAC,AAAY,gBAAI,AAAI,AAAC,MAAC,AAAC;AACrC,kBAAM,AAAgB,mBAAG,MAAM,AAAQ,SAAC,AAAW,YAAC,AAAW,YAAC,AAAgB,AAAE,mCAAiB,AAAQ,SAAC,AAAQ,SAAC,AAAqB,qBAAK,AAAE,wBAAiB,AAAQ,SAAC,AAAQ,SAAC,AAAI,IAAK,AAAE,wBAAiB,AAAQ,SAAC,AAAQ,SAAC,AAAQ,QAAK,OAAE,AAAkB,AAAC;AACpQ,kBAAM,AAAY,eAAG,AAAgB,oBAAI,AAAI,AAAC,AAAC,OAAC,AAAI,AAAC,AAAC,OAAC,MAAM,AAAQ,8CAAC,AAAgB,kBAAE,AAAO,AAAC;AAChG,AAAiD;AACjD,AAAE,AAAC,gBAAC,AAAY,gBAAI,AAAI,AAAC,MAAC,AAAC;AACzB,AAAW,4BAAC,AAAY,eAAG,AAAY,AACzC;AAAC,AACH;AAAC;AACD,eAAO,AAAW,YAAC,AAAgB;AACnC,AAAM,eAAC,AAAW,AACpB;AAAC;;;;;;;AA+BD,AAAgB,AAChB,AAAM;;qEAAC,AAAK,WAA0B,AAAsB,OAAE,AAA4C;AACxG,cAAM,AAAQ,WAAG,AAAK,MAAC,AAAQ;AAC/B,cAAM,AAAc,iBAAG,MAAM,AAA8B,gFAAC,AAAQ,UAAE,AAAe,iBAAE,AAAK,MAAC,AAAI,AAAC;AAClG,AAAE,AAAC,YAAC,AAAc,kBAAI,AAAI,QAAI,AAAc,eAAC,AAAM,WAAK,AAAC,AAAC,GAAC,AAAC;AAC1D,AAAM,mBAAC,AAAE,AACX;AAAC;AAED,cAAM,AAAM,SAAG,AAAK,MAAC,AAAO,OAAC,AAAM;AACnC,cAAM,AAAO,UAAG,AAAQ,SAAC,AAAO,QAAC,AAAO;AACxC,cAAM,AAAI;AAAoB,AAAG,AAAE,mBAAC,AAAQ,oDAAC,AAAK,MAAC,AAAK,MAAE,AAAQ,UAAE,AAAK,AAAC,AAAC;SAA9D,AAAI,AAAI;AACrB,cAAM,AAAK,QAAG,AAAQ,SAAC,AAAQ,aAAK,AAAQ,iCAAC,AAAG;AAChD,cAAM,AAAY,eAAG,IAAI,AAAG,AAAU;AACtC,cAAM,AAAU,aAAG,MAAM,AAAgB,iBAAC,AAAO,SAAE,AAAK,QAAE,MAAM,AAAc,eAAC,AAAQ,AAAC,AAAC;AACzF,cAAM,AAAM,SAA2B,AAAE;AACzC,AAAG,AAAC,aAAC,IAAI,AAAa,iBAAI,AAAc,AAAC,gBAAC,AAAC;AACzC,AAAE,AAAC,gBAAC,AAAa,cAAC,AAAQ,aAAK,AAAS,AAAC,WAAC,AAAC;AACzC,AAAQ,AACV;AAAC;AAED,AAAE,AAAC,gBAAC,AAAa,cAAC,AAAQ,aAAK,AAAQ,YAAI,AAAa,iBAAI,AAAa,AAAC,eAAC,AAAC;AAC1E,AAAa,kDAAO,AAAa,AAAC;AAClC,uBAAQ,AAA+B,cAAC,AAAW,AACrD;AAAC;AAED,gBAAI,AAAG,MAAG,AAAM;AAChB,AAAE,AAAC,gBAAC,AAAc,eAAC,AAAM,SAAG,AAAC,KAAI,AAAa,kBAAK,AAAc,eAAC,AAAC,AAAC,AAAC,IAAC,AAAC;AACrE,AAAG,sBAAG,AAAI,MAAC,AAAI,KAAC,AAAM,QAAE,AAAa,cAAC,AAAQ,AAAC,AACjD;AAAC;AAED,AAA2E;AAC3E,gBAAI,AAAgC,mCAAG,AAAa,cAAC,AAAQ,aAAK,AAAQ;AAE1E,gBAAI,AAAI,OAAG,AAAU;AACrB,AAAmC;AACnC,AAAE,AAAC,gBAAC,AAAgC,oCAAI,AAAQ,SAAC,AAAQ,aAAK,AAAQ,iCAAC,AAAO,AAAC,SAAC,AAAC;AAC/E,AAAI,yCACC,AAAI,AACR,AAAC;AACD,AAA0B,qBAAC,AAAI,OAAG,MAAM,AAAI,KAAC,AAAK,AACrD;AAAC;AAED,AAAE,AAAC,gBAAC,AAAK,MAAC,AAAgB,oBAAI,AAAI,QAAI,AAAa,cAAC,AAAQ,aAAK,AAAQ,AAAC,UAAC,AAAC;AAC1E,AAAI,yCACC,AAAI,QACP,AAAkB,oBAAE,AAAK,MAAC,AAAgB,AAC3C,AACH;AAAC;AAED,AAAG,AAAC,iBAAC,MAAM,AAAO,WAAI,AAAmB,oBAAC,AAAQ,UAAE,AAAa,AAAC,AAAC,gBAAC,AAAC;AACnE,AAAE,AAAC,oBAAC,AAAK,SAAI,AAAgC,AAAC,kCAAC,AAAC;AAC9C,AAAyI;AACzI,AAAgC,uDAAG,AAAK;AACxC,0BAAM,AAAe,gBAAC,AAAa,eAAE,AAAM,QAAE,AAAG,KAAE,AAAO,SAAE,AAAY,cAAE,AAAO,SAAE,AAAQ,AAAC,AAC7F;AAAC;AAED,sBAAM,AAAc,iBAAG,AAAI,MAAC,AAAI,KAAC,AAAG,AAAE,QAAG,AAAO,UAAG,AAAQ,SAAC,AAAQ,aAAK,AAAQ,iCAAC,AAAO,AAAC,AAAC,UAAC,AAAE,AAAC,AAAC,AAAC,SAAI,AAAQ,SAAC,AAAQ,SAAC,AAAqB,qBAAE,EAAM,AAAC;AACrJ,AAAE,AAAC,oBAAC,AAAY,aAAC,AAAG,IAAC,AAAc,AAAC,AAAC,iBAAC,AAAC;AACrC,AAAQ,AACV;AAAC;AAED,AAAY,6BAAC,AAAG,IAAC,AAAc,AAAC;AAEhC,sBAAM,AAAW,cAAG,AAAM,OAAC,AAAI,KAAC,AAAQ,0CAAC,AAAI,AAAC,AAAC;AAC/C,sBAAM,AAAU,gDAAC,AAAc,gBAAE,AAAW,AAAC;AAE7C,AAAkE;AAClE,AAAM,uBAAC,AAAI;AACT,AAAI,0BAAE,AAAc;AACpB,AAAW;AACX,AAAI,0BAAE,AAAI;AACV,AAAQ;AACR,AAAM,4BAAE,AAAI;AACZ,AAAa,AACd,AAAC,AACJ;AARc;AAQb,AACH;AAAC;AACD,AAAM,eAAC,AAAM,AACf;AAAC;;;;;;;;qEAED,AAAK,WAA2B,AAAe,SAAE,AAAsB,OAAE,AAAwB;AAC/F,cAAM,AAAgB,mBAAG,AAAK,MAAC,AAAU;AACzC,AAAM,+BACJ,AAAO,SACP,AAAW,aAAE,IAAI,AAAI,AAAE,OAAC,AAAW,AAAE,eACrC,AAAI,MAAE,AAAI,MAAC,AAAQ,SAAC,AAAK,MAAC,AAAK,AAAC,SAC7B,AAAgB,oBACnB,AAAM,QAAE,CAAC,AAAgB,oBAAI,AAAI,AAAC,AAAC,OAAC,AAAI,AAAC,AAAC,OAAC,AAAgB,iBAAC,AAAM,AAAC,YAAI,MAAM,AAAQ,oDAAC,AAAK,MAAC,AAAK,AAAC,UAC/F,AAAyB,AAC7B,AACH;AAAC;;;;;;AAED,AAA2C;;;;qEAC3C,AAAK,WAA0B,AAAmC,eAAE,AAAc,QAAE,AAAW,KAAE,AAAe,SAAE,AAAyB,cAAE,AAAe,SAAE,AAA+B;AAC3L,cAAM,AAAQ,WAAG,AAAa,cAAC,AAAQ,aAAK,AAAQ;AACpD,cAAM,AAAc,iBAAI,AAAQ,YAAI,AAAM,WAAK,AAAG,AAAC,AAAC,AAAC,GAA9B,GAA+B,AAAI,MAAC,AAAI,KAAC,AAAG,KAAE,AAAQ,AAAE,aAAG,AAAO,OAAW,AAAC,AAAC,AAAC,eAAC,AAAI,MAAC,AAAI,KAAC,AAAG,AAAE,QAAG,AAAO,OAAW,AAAC;AAC7I,AAAE,AAAC,YAAC,CAAC,AAAY,aAAC,AAAG,IAAC,AAAc,AAAC,AAAC,iBAAC,AAAC;AACtC,AAAY,yBAAC,AAAG,IAAC,AAAc,AAAC;AAChC,kEAAiB,AAAc;AAC7B,AAAO;AACP,AAAW,6BAAE,IAAI,AAAI,AAAE,OAAC,AAAW,AAAE;AACrC,AAAG,qBAAE,AAAkB,oEAAC,AAAa,eAAE,AAAQ,SAAC,AAAa,cAAC,AAAK,OAAE,AAAK,OAAE,AAAQ,AAAC,WAAE,AAAQ,AAAC,AACjG;AAJgC,aAA3B,AAAU,EAIb,EAAC,AAAM,QAAE,AAAC,AAAC,AAAC;AAEf,AAAQ,qBAAC,AAAI,KAAC,AAAuB;AACnC,AAAI,sBAAE,AAAc;AACpB,AAAI,sBAAE,AAAI;AACV,AAAQ;AACR,AAAM,wBAAE,AAAI;AACZ,AAAa,AACd,AAAC,AACJ;AAPwC;AAOvC,AACH;AAAC;;;;;;;;;;;AAvKD,AAAO,AAAE,AAAQ,AAAE,AAAM,AAAc;;;;;;AAEvC,AAAO,AAAE,AAAU,AAAE,AAAU,AAAE,AAAQ,AAAE,AAAM,AAAY;;;;;;AAC7D,AAAO,AAAE,AAAQ,AAAE,AAAM,AAAS;;;;;;AAClC,AAAO,AAAE,AAAI,AAAE,AAAM,AAAU;;;;AAC/B,AAAO,AAAK,AAAI,AAAM,AAAM;;;;AAE5B,AAAO,AAAE,AAAQ,AAAE,AAAM,AAAS;;;;;;AAGlC,AAAO,AAAE,AAAkB,AAAE,AAA8B,AAAE,AAAM,AAAkB;;;;;;AAgBrF,8CAA8C,AAA+B;AAC3E,UAAM,AAAK,QAAG,AAAQ,SAAC,AAA4B,6BAAC,AAAkC;AACtF,AAAM,WAAC,AAAK,SAAI,AAAI,AAAC,AAAC,OAAC,AAAQ,SAAC,AAAM,OAAC,AAAkC,AAAC,AAAC,qCAAC,AAAK,AACnF;AAAC;AAED,AAIG;;;;;AACH,6BAA6B,AAA+B,UAAE,AAAmC;AAC/F,UAAM,AAAc,iBAAY,AAAsC,cAAC,AAAO,WAAI,AAAQ;AAC1F,AAA+C;AAC/C,AAAE,AAAC,QAAC,AAAc,mBAAK,AAAO,WAAI,AAAa,cAAC,AAAQ,aAAK,AAAQ,YAAI,CAAC,AAAoC,qCAAC,AAAQ,AAAC,AAAC,WAAC,AAAC;AACzH,AAAM,eAAC,CAAC,AAAc,AAAC,AACzB;AAAC;AAED,AAAM,AAAC,YAAC,AAAc,AAAC,AAAC,AAAC;AACvB,aAAK,AAAM;AACT,AAAM,mBAAC,CAAC,AAAc,gBAAE,AAAO,AAAC;AAElC,aAAK,AAAQ;AACX,AAAM,mBAAC,CAAC,AAAc,gBAAE,AAAO,SAAE,AAAM,AAAC;AAE1C;AACE,AAAM,mBAAC,CAAC,AAAc,AAAC,AAC3B,AAAC,AACH;;AAAC","sourcesContent":["import { hashFile } from \"builder-util\"\nimport { GenericServerOptions, PublishConfiguration, UpdateInfo, GithubOptions, WindowsUpdateInfo } from \"builder-util-runtime\"\nimport { outputFile, outputJson, readFile } from \"fs-extra-p\"\nimport { safeDump } from \"js-yaml\"\nimport { Lazy } from \"lazy-val\"\nimport * as path from \"path\"\nimport { ReleaseInfo } from \"../configuration\"\nimport { Platform } from \"../core\"\nimport { ArtifactCreated } from \"../packagerApi\"\nimport { PlatformPackager } from \"../platformPackager\"\nimport { computeDownloadUrl, getPublishConfigsForUpdateInfo } from \"./PublishManager\"\n\nasync function getReleaseInfo(packager: PlatformPackager<any>) {\n  const releaseInfo: ReleaseInfo = {...(packager.platformSpecificBuildOptions.releaseInfo || packager.config.releaseInfo)}\n  if (releaseInfo.releaseNotes == null) {\n    const releaseNotesFile = await packager.getResource(releaseInfo.releaseNotesFile, `release-notes-${packager.platform.buildConfigurationKey}.md`, `release-notes-${packager.platform.name}.md`, `release-notes-${packager.platform.nodeName}.md`, \"release-notes.md\")\n    const releaseNotes = releaseNotesFile == null ? null : await readFile(releaseNotesFile, \"utf-8\")\n    // to avoid undefined in the file, check for null\n    if (releaseNotes != null) {\n      releaseInfo.releaseNotes = releaseNotes\n    }\n  }\n  delete releaseInfo.releaseNotesFile\n  return releaseInfo\n}\n\nfunction isGenerateUpdatesFilesForAllChannels(packager: PlatformPackager<any>) {\n  const value = packager.platformSpecificBuildOptions.generateUpdatesFilesForAllChannels\n  return value == null ? packager.config.generateUpdatesFilesForAllChannels : value\n}\n\n/**\n if this is an \"alpha\" version, we need to generate only the \"alpha\" .yml file\n if this is a \"beta\" version, we need to generate both the \"alpha\" and \"beta\" .yml file\n if this is a \"stable\" version, we need to generate all the \"alpha\", \"beta\" and \"stable\" .yml file\n */\nfunction computeChannelNames(packager: PlatformPackager<any>, publishConfig: PublishConfiguration) {\n  const currentChannel: string = (publishConfig as GenericServerOptions).channel || \"latest\"\n  // for GitHub should be pre-release way be used\n  if (currentChannel === \"alpha\" || publishConfig.provider === \"github\" || !isGenerateUpdatesFilesForAllChannels(packager)) {\n    return [currentChannel]\n  }\n\n  switch (currentChannel) {\n    case \"beta\":\n      return [currentChannel, \"alpha\"]\n\n    case \"latest\":\n      return [currentChannel, \"alpha\", \"beta\"]\n\n    default:\n      return [currentChannel]\n  }\n}\n\n/** @internal */\nexport async function writeUpdateInfo(event: ArtifactCreated, _publishConfigs: Array<PublishConfiguration>): Promise<Array<ArtifactCreated>> {\n  const packager = event.packager\n  const publishConfigs = await getPublishConfigsForUpdateInfo(packager, _publishConfigs, event.arch)\n  if (publishConfigs == null || publishConfigs.length === 0) {\n    return []\n  }\n\n  const outDir = event.target!.outDir\n  const version = packager.appInfo.version\n  const sha2 = new Lazy<string>(() => hashFile(event.file!, \"sha256\", \"hex\"))\n  const isMac = packager.platform === Platform.MAC\n  const createdFiles = new Set<string>()\n  const sharedInfo = await createUpdateInfo(version, event, await getReleaseInfo(packager))\n  const events: Array<ArtifactCreated> = []\n  for (let publishConfig of publishConfigs) {\n    if (publishConfig.provider === \"bintray\") {\n      continue\n    }\n\n    if (publishConfig.provider === \"github\" && \"releaseType\" in publishConfig) {\n      publishConfig = {...publishConfig}\n      delete (publishConfig as GithubOptions).releaseType\n    }\n\n    let dir = outDir\n    if (publishConfigs.length > 1 && publishConfig !== publishConfigs[0]) {\n      dir = path.join(outDir, publishConfig.provider)\n    }\n\n    // spaces is a new publish provider, no need to keep backward compatibility\n    let isElectronUpdater1xCompatibility = publishConfig.provider !== \"spaces\"\n\n    let info = sharedInfo\n    // noinspection JSDeprecatedSymbols\n    if (isElectronUpdater1xCompatibility && packager.platform === Platform.WINDOWS) {\n      info = {\n        ...info,\n      };\n      (info as WindowsUpdateInfo).sha2 = await sha2.value\n    }\n\n    if (event.safeArtifactName != null && publishConfig.provider === \"github\") {\n      info = {\n        ...info,\n        githubArtifactName: event.safeArtifactName,\n      }\n    }\n\n    for (const channel of computeChannelNames(packager, publishConfig)) {\n      if (isMac && isElectronUpdater1xCompatibility) {\n        // write only for first channel (generateUpdatesFilesForAllChannels is a new functionality, no need to generate old mac update info file)\n        isElectronUpdater1xCompatibility = false\n        await writeOldMacInfo(publishConfig, outDir, dir, channel, createdFiles, version, packager)\n      }\n\n      const updateInfoFile = path.join(dir, `${channel}${packager.platform === Platform.WINDOWS ? \"\" : `-${packager.platform.buildConfigurationKey}`}.yml`)\n      if (createdFiles.has(updateInfoFile)) {\n        continue\n      }\n\n      createdFiles.add(updateInfoFile)\n\n      const fileContent = Buffer.from(safeDump(info))\n      await outputFile(updateInfoFile, fileContent)\n\n      // artifact should be uploaded only to designated publish provider\n      events.push({\n        file: updateInfoFile,\n        fileContent,\n        arch: null,\n        packager,\n        target: null,\n        publishConfig,\n      })\n    }\n  }\n  return events\n}\n\nasync function createUpdateInfo(version: string, event: ArtifactCreated, releaseInfo: ReleaseInfo) {\n  const customUpdateInfo = event.updateInfo\n  return {\n    version,\n    releaseDate: new Date().toISOString(),\n    path: path.basename(event.file!),\n    ...customUpdateInfo,\n    sha512: (customUpdateInfo == null ? null : customUpdateInfo.sha512) || await hashFile(event.file!),\n    ...releaseInfo as UpdateInfo,\n  }\n}\n\n// backward compatibility - write json file\nasync function writeOldMacInfo(publishConfig: PublishConfiguration, outDir: string, dir: string, channel: string, createdFiles: Set<string>, version: string, packager: PlatformPackager<any>) {\n  const isGitHub = publishConfig.provider === \"github\"\n  const updateInfoFile = (isGitHub && outDir === dir) ? path.join(dir, \"github\", `${channel}-mac.json`) : path.join(dir, `${channel}-mac.json`)\n  if (!createdFiles.has(updateInfoFile)) {\n    createdFiles.add(updateInfoFile)\n    await outputJson(updateInfoFile, {\n      version,\n      releaseDate: new Date().toISOString(),\n      url: computeDownloadUrl(publishConfig, packager.generateName2(\"zip\", \"mac\", isGitHub), packager),\n    }, {spaces: 2})\n\n    packager.info.dispatchArtifactCreated({\n      file: updateInfoFile,\n      arch: null,\n      packager,\n      target: null,\n      publishConfig,\n    })\n  }\n}\n"]}
