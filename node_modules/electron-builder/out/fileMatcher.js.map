{"version":3,"file":"fileMatcher.js","sourceRoot":"","sources":["../src/fileMatcher.ts"],"names":[],"mappings":"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","sourcesContent":["import BluebirdPromise from \"bluebird-lst\"\nimport { asArray, debug, warn } from \"electron-builder-util\"\nimport { copyDir, copyOrLinkFile, Filter, statOrNull } from \"electron-builder-util/out/fs\"\nimport { mkdirs } from \"fs-extra-p\"\nimport { Minimatch } from \"minimatch\"\nimport * as path from \"path\"\nimport { Platform } from \"./core\"\nimport { hasDep } from \"./fileTransformer\"\nimport { Config, FilePattern, PlatformSpecificBuildOptions } from \"./metadata\"\nimport { PlatformPackager } from \"./platformPackager\"\nimport { createFilter, hasMagic } from \"./util/filter\"\n\n/** @internal */\nexport class FileMatcher {\n  readonly from: string\n  readonly to: string\n\n  readonly patterns: Array<string>\n\n  constructor(from: string, to: string, private readonly macroExpander: (pattern: string) => string, patterns?: Array<string> | string | n) {\n    this.from = macroExpander(from)\n    this.to = macroExpander(to)\n    this.patterns = asArray(patterns).map(it => this.normalizePattern(it))\n  }\n\n  normalizePattern(pattern: string) {\n    return path.posix.normalize(this.macroExpander(pattern.replace(/\\\\/g, \"/\")))\n  }\n\n  addPattern(pattern: string) {\n    this.patterns.push(this.normalizePattern(pattern))\n  }\n\n  prependPattern(pattern: string) {\n    this.patterns.unshift(this.normalizePattern(pattern))\n  }\n\n  isEmpty() {\n    return this.patterns.length === 0\n  }\n\n  containsOnlyIgnore(): boolean {\n    return !this.isEmpty() && this.patterns.find(it => !it.startsWith(\"!\")) == null\n  }\n\n  computeParsedPatterns(result: Array<Minimatch>, fromDir?: string): void {\n    // https://github.com/electron-userland/electron-builder/issues/733\n    const minimatchOptions = {dot: true}\n\n    const relativeFrom = fromDir == null ? null : path.relative(fromDir, this.from)\n\n    if (this.patterns.length === 0 && relativeFrom != null) {\n      // file mappings, from here is a file\n      result.push(new Minimatch(relativeFrom, minimatchOptions))\n      return\n    }\n\n    for (let pattern of this.patterns) {\n      if (relativeFrom != null) {\n        pattern = path.join(relativeFrom, pattern)\n      }\n\n      const parsedPattern = new Minimatch(pattern, minimatchOptions)\n      result.push(parsedPattern)\n\n      // do not add if contains dot (possibly file if has extension)\n      if (!pattern.includes(\".\") && !hasMagic(parsedPattern)) {\n        // https://github.com/electron-userland/electron-builder/issues/545\n        // add **/*\n        result.push(new Minimatch(`${pattern}/**/*`, minimatchOptions))\n      }\n    }\n  }\n\n  createFilter(ignoreFiles?: Set<string>, rawFilter?: (file: string) => boolean, excludePatterns?: Array<Minimatch> | n): Filter {\n    const parsedPatterns: Array<Minimatch> = []\n    this.computeParsedPatterns(parsedPatterns)\n    return createFilter(this.from, parsedPatterns, ignoreFiles, rawFilter, excludePatterns)\n  }\n\n  toString() {\n    return `from: ${this.from}, to: ${this.to}, patterns: ${this.patterns.join(\", \")}`\n  }\n}\n\n/** @internal */\nexport function createFileMatcher(appDir: string, resourcesPath: string, macroExpander: (pattern: string) => string, platformSpecificBuildOptions: PlatformSpecificBuildOptions, packager: PlatformPackager<any>, outDir: string) {\n  const buildResourceDir = path.resolve(packager.info.projectDir, packager.buildResourcesDir)\n\n  const matchers = packager.info.isPrepackedAppAsar ? null : getFileMatchers(packager.info.config, \"files\", appDir, path.join(resourcesPath, \"app\"), false, macroExpander, platformSpecificBuildOptions)\n  const matcher = matchers == null ? new FileMatcher(appDir, path.join(resourcesPath, \"app\"), macroExpander) : matchers[0]\n\n  // https://github.com/electron-userland/electron-builder/issues/1741#issuecomment-311111418 so, do not use inclusive patterns\n\n  const patterns = matcher.patterns\n\n  const customFirstPatterns: Array<string> = []\n  if (matcher.isEmpty() || matcher.containsOnlyIgnore()) {\n    customFirstPatterns.push(\"**/*\")\n  }\n  else {\n    // prependPattern - user pattern should be after to be able to override\n    // do not use **/node_modules/**/* because if pattern starts with **, all not explicitly excluded directories will be traversed (performance + empty dirs will be included into the asar)\n    customFirstPatterns.push(\"node_modules/**/*\")\n    patterns.push(\"package.json\")\n  }\n\n  // https://github.com/electron-userland/electron-builder/issues/1482\n  const relativeBuildResourceDir = path.relative(matcher.from, buildResourceDir)\n  if (relativeBuildResourceDir.length !== 0 && !relativeBuildResourceDir.startsWith(\".\")) {\n    customFirstPatterns.push(`!${relativeBuildResourceDir}{,/**/*}`)\n  }\n\n  const relativeOutDir = matcher.normalizePattern(path.relative(packager.info.projectDir, outDir))\n  if (!relativeOutDir.startsWith(\".\")) {\n    customFirstPatterns.push(`!${relativeOutDir}{,/**/*}`)\n  }\n\n  // add our default exclusions after last user possibly defined \"all\"/permissive pattern\n  let insertIndex = 0\n  for (let i = patterns.length - 1; i >= 0; i--) {\n    if (patterns[i].startsWith(\"**/\")) {\n      insertIndex = i + 1\n      break\n    }\n  }\n  patterns.splice(insertIndex, 0, ...customFirstPatterns)\n\n  if (packager.platform !== Platform.WINDOWS) {\n    // https://github.com/electron-userland/electron-builder/issues/1738\n    patterns.push(\"!**/node_modules/**/*.{dll,exe}\")\n  }\n\n  // https://github.com/electron-userland/electron-builder/issues/1738#issuecomment-310729208\n  if (hasDep(\"lzma-native\", packager.info)) {\n    patterns.push(\"!**/node_modules/lzma-native/build{,/**/*}\")\n    patterns.push(\"!**/node_modules/lzma-native/deps{,/**/*}\")\n  }\n\n  patterns.push(\"!**/node_modules/*/{CHANGELOG.md,ChangeLog,changelog.md,README.md,README,readme.md,readme,test,__tests__,tests,powered-test,example,examples,*.d.ts}\")\n  patterns.push(\"!**/node_modules/.bin\")\n  patterns.push(`!**/*.{iml,o,hprof,orig,pyc,pyo,rbc,swp,csproj,sln,xproj}`)\n  patterns.push(\"!**/._*\")\n  patterns.push(\"!**/electron-builder.{yaml,yml,json,json5,toml}\")\n  patterns.push(\"!**/node_modules/@types{,/**/*}\")\n  //noinspection SpellCheckingInspection\n  patterns.push(\"!**/{.git,.hg,.svn,CVS,RCS,SCCS,\" +\n    \"__pycache__,.DS_Store,thumbs.db,.gitignore,.gitkeep,.gitattributes,\" +\n    \".idea,.vs,.editorconfig,.flowconfig,.jshintrc,.eslintrc,\" +\n    \".yarn-integrity,.yarn-metadata.json,yarn-error.log,yarn.lock,package-lock.json,npm-debug.log,\" +\n    \"appveyor.yml,.travis.yml,circle.yml,.nyc_output}\")\n\n  return matcher\n}\n\n/** @internal */\nexport function getFileMatchers(config: Config, name: \"files\" | \"extraFiles\" | \"extraResources\" | \"asarUnpack\", defaultSrc: string, defaultDestination: string, allowAdvancedMatching: boolean, macroExpander: (pattern: string) => string, customBuildOptions: PlatformSpecificBuildOptions): Array<FileMatcher> | null {\n  const globalPatterns: Array<string | FilePattern> | string | n | FilePattern = (<any>config)[name]\n  const platformSpecificPatterns: Array<string | FilePattern> | string | n = (<any>customBuildOptions)[name]\n\n  const defaultMatcher = new FileMatcher(defaultSrc, defaultDestination, macroExpander)\n  const fileMatchers: Array<FileMatcher> = []\n\n  function addPatterns(patterns: Array<string | FilePattern> | string | n | FilePattern) {\n    if (patterns == null) {\n      return\n    }\n    else if (!Array.isArray(patterns)) {\n      if (typeof patterns === \"string\") {\n        defaultMatcher.addPattern(patterns)\n        return\n      }\n      patterns = [patterns]\n    }\n\n    for (const pattern of patterns) {\n      if (typeof pattern === \"string\") {\n        // use normalize to transform ./foo to foo\n        defaultMatcher.addPattern(pattern)\n      }\n      else if (allowAdvancedMatching) {\n        const from = pattern.from == null ? defaultSrc : path.resolve(defaultSrc, pattern.from)\n        const to = pattern.to == null ? defaultDestination : path.resolve(defaultDestination, pattern.to)\n        fileMatchers.push(new FileMatcher(from, to, macroExpander, pattern.filter))\n      }\n      else {\n        throw new Error(`Advanced file copying not supported for \"${name}\"`)\n      }\n    }\n  }\n\n  addPatterns(globalPatterns)\n  addPatterns(platformSpecificPatterns)\n\n  if (!defaultMatcher.isEmpty()) {\n    // default matcher should be first in the array\n    fileMatchers.unshift(defaultMatcher)\n  }\n\n  return fileMatchers.length === 0 ? null : fileMatchers\n}\n\n/** @internal */\nexport function copyFiles(patterns: Array<FileMatcher> | null): Promise<any> {\n  if (patterns == null || patterns.length === 0) {\n    return BluebirdPromise.resolve()\n  }\n\n  return BluebirdPromise.map(patterns, async pattern => {\n    const fromStat = await statOrNull(pattern.from)\n    if (fromStat == null) {\n      warn(`File source ${pattern.from} doesn't exist`)\n      return\n    }\n\n    if (fromStat.isFile()) {\n      const toStat = await statOrNull(pattern.to)\n      // https://github.com/electron-userland/electron-builder/issues/1245\n      if (toStat != null && toStat.isDirectory()) {\n        return await copyOrLinkFile(pattern.from, path.join(pattern.to, path.basename(pattern.from)), fromStat)\n      }\n\n      await mkdirs(path.dirname(pattern.to))\n      return await copyOrLinkFile(pattern.from, pattern.to, fromStat)\n    }\n\n    if (pattern.isEmpty() || pattern.containsOnlyIgnore()) {\n      pattern.prependPattern(\"**/*\")\n    }\n    if (debug.enabled) {\n      debug(`Copying files using pattern: ${pattern}`)\n    }\n    return await copyDir(pattern.from, pattern.to, pattern.createFilter())\n  })\n}"]}
