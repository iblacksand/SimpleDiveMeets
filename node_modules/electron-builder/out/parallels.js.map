{"version":3,"file":"parallels.js","sourceRoot":"","sources":["../src/parallels.ts"],"names":[],"mappings":"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","sourcesContent":["import { exec, spawn, ExecOptions, DebugLogger, ExtraSpawnOptions } from \"builder-util\"\nimport { SpawnOptions, execFileSync } from \"child_process\"\nimport * as path from \"path\"\n\nasync function parseVmList(debugLogger: DebugLogger) {\n  // do not log output if debug - it is huge, logged using debugLogger\n  let rawList = await exec(\"prlctl\", [\"list\", \"-i\", \"-s\", \"name\"], undefined, false)\n  debugLogger.add(\"parallels.list\", rawList)\n\n  rawList = rawList.substring(rawList.indexOf(\"ID:\"))\n\n  // let match: Array<string> | null\n  const result: Array<ParallelsVm> = []\n  for (const info of rawList.split(\"\\n\\n\").map(it => it.trim()).filter(it => it.length > 0)) {\n    const vm: any = {}\n    for (const line of info.split(\"\\n\")) {\n      const meta = /^([^:(\"]+): (.*)$/.exec(line)\n      if (meta == null) {\n        continue\n      }\n\n      const key = meta[1].toLowerCase()\n      if (key === \"id\" || key === \"os\" || key === \"name\" || key === \"state\" || key === \"name\") {\n        vm[key] = meta[2].trim()\n      }\n    }\n    result.push(vm)\n  }\n  return result\n}\n\nexport async function getWindowsVm(debugLogger: DebugLogger): Promise<VmManager> {\n  const vmList = (await parseVmList(debugLogger)).filter(it => it.os === \"win-10\")\n  if (vmList.length === 0) {\n    throw new Error(\"Cannot find suitable Parallels Desktop virtual machine (Windows 10 is required)\")\n  }\n\n  // prefer running or suspended vm\n  return new ParallelsVmManager(vmList.find(it => it.state === \"running\") || vmList.find(it => it.state === \"suspended\") || vmList[0])\n}\n\nexport class VmManager {\n  get pathSep(): string {\n    return path.sep\n  }\n\n  exec(file: string, args: Array<string>, options?: ExecOptions, isLogOutIfDebug = true): Promise<string> {\n    return exec(file, args, options, isLogOutIfDebug)\n  }\n\n  spawn(command: string, args: Array<string>, options?: SpawnOptions, extraOptions?: ExtraSpawnOptions): Promise<any> {\n    return spawn(command, args)\n  }\n\n  toVmFile(file: string): string {\n    return file\n  }\n}\n\nclass ParallelsVmManager extends VmManager {\n  private startPromise: Promise<any>\n\n  private isExitHookAdded = false\n\n  constructor(private readonly vm: ParallelsVm) {\n    super()\n\n    this.startPromise = this.doStartVm()\n  }\n\n  get pathSep(): string {\n    return \"/\"\n  }\n\n  private handleExecuteError(error: Error): any {\n    if (error.message.includes(\"Unable to open new session in this virtual machine\")) {\n      throw new Error(`Please ensure that your are logged in \"${this.vm.name}\" parallels virtual machine. In the future please do not stop VM, but suspend.\\n\\n${error.message}`)\n    }\n    throw error\n  }\n\n  async exec(file: string, args: Array<string>, options?: ExecOptions): Promise<string> {\n    await this.ensureThatVmStarted()\n    // it is important to use \"--current-user\" to execute command under logged in user - to access certs.\n    return await exec(\"prlctl\", [\"exec\", this.vm.id, \"--current-user\", file.startsWith(\"/\") ? macPathToParallelsWindows(file) : file].concat(args), options)\n      .catch(error => this.handleExecuteError(error))\n  }\n\n  async spawn(command: string, args: Array<string>, options?: SpawnOptions, extraOptions?: ExtraSpawnOptions): Promise<any> {\n    await this.ensureThatVmStarted()\n    return await spawn(\"prlctl\", [\"exec\", this.vm.id, command].concat(args), options, extraOptions)\n      .catch(error => this.handleExecuteError(error))\n  }\n\n  private async doStartVm() {\n    const vmId = this.vm.id\n    const state = this.vm.state\n    if (state === \"running\") {\n      return\n    }\n\n    if (!this.isExitHookAdded) {\n      this.isExitHookAdded = true\n      require(\"async-exit-hook\")((callback: (() => void) | null) => {\n        const stopArgs = [\"suspend\", vmId]\n        if (callback == null) {\n          execFileSync(\"prlctl\", stopArgs)\n        }\n        else {\n          exec(\"prlctl\", stopArgs)\n            .then(callback)\n            .catch(callback)\n        }\n      })\n    }\n    await exec(\"prlctl\", [\"start\", vmId])\n  }\n\n  private ensureThatVmStarted() {\n    let startPromise = this.startPromise\n    if (startPromise == null) {\n      startPromise = this.doStartVm()\n      this.startPromise = startPromise\n    }\n    return startPromise\n  }\n\n  toVmFile(file: string): string {\n    // https://stackoverflow.com/questions/4742992/cannot-access-network-drive-in-powershell-running-as-administrator\n    return macPathToParallelsWindows(file)\n  }\n}\n\nexport function macPathToParallelsWindows(file: string) {\n  return \"\\\\\\\\Mac\\\\Host\\\\\\\\\" + file\n}\n\nexport interface ParallelsVm {\n  id: string\n  name: string\n  os: \"win-10\" | \"ubuntu\" | \"elementary\"\n  state: \"running\" | \"suspended\" | \"stopped\"\n}"]}
